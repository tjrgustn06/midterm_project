<?xml version="1.0" encoding="UTF-8"?>
<!-- Schema 추가 -->
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "https://mybatis.org/dtd/mybatis-3-mapper.dtd">

  <mapper namespace="com.camp.s1.product.ProductDAO">
  
  	<!-- 검색을 위한 조건 -->
  	<sql id="searchCondition">
  		<if test="kind == 'contents'">
  			WHERE CONTENTS LIKE '%' || #{search} || '%'
  		</if>
  		<if test="kind == 'name'">
  			WHERE NAME LIKE '%' || #{search} || '%'
  		</if>
  	</sql>
  	
  	<!-- List 출력 -->
  	<select id="getProductList" parameterType="Pager" resultType="ProductDTO">
  		SELECT * FROM(
			SELECT ROWNUM R, P.* FROM(
				SELECT * FROM PRODUCT 
				<include refid="searchCondition"></include>
				ORDER BY NAME DESC
			) P
		) WHERE R BETWEEN #{startRow} AND #{lastRow}
  	</select>
  	
  	<!-- 총 갯수 출력 -->
  	<select id="getTotalCount" parameterType="Pager" resultType="Long">
  		SELECT COUNT(PRODUCTNUM) FROM PRODUCT
  		<include refid="searchCondition"></include>
  	</select>
  	
  	<!-- Detail 상세페이지 출력 -->
  	<select id="getProductDetail" parameterType="ProductDTO" resultMap="productDetailResult">
  		SELECT * FROM PRODUCT
  		LEFT JOIN
  		PRODUCTFILES
  		USING (PRODUCTNUM)
  		WHERE PRODUCTNUM = #{productNum}
  	</select>
  	
  	<resultMap type="productDTO" id="productDetailResult">
  		<id column="PRODUCTNUM" property="productNum"/>
  		<result column="NAME" property="name"/>
  		<result column="CONTENTS" property="contents"/>
  		<result column="STATUS" property="status"/>
  		<result column="SUMMARY" property="summary"/>
  		<collection property="productFileDTOs" javaType="List" ofType="ProductFileDTO">
  			<id column="FILENUM" property="fileNum"/>
  			<result column="FILENAME" property="fileName"/>
  			<result column="ORINAME" property="oriName"/>
  		</collection>
  	</resultMap>
  	
  	<!--상품에따른 Grade 출력 -->
  	<select id="getProductGrade" parameterType="productDTO" resultType="productGradeDTO">
  		SELECT * FROM PRODUCTGRADE WHERE PRODUCTNUM = #{productNum}
  		ORDER BY GRADENAME ASC
  	</select>
  	
  	<!-- Add 물품 추가 -->
  	<insert id="setProductAdd" parameterType="ProductDTO">
  		<selectKey	keyProperty="productNum" resultType="Long" order="BEFORE">
  			SELECT PRODUCTSEQ.NEXTVAL FROM DUAL
  		</selectKey>
  		INSERT INTO PRODUCT (PRODUCTNUM, NAME, CONTENTS, STATUS, SUMMARY)
  		VALUES (#{productNum}, #{name}, #{contents}, '대여가능', #{summary})
  	</insert>
  	
  	<!-- Grade 추가 -->
  	<insert id="setProductGradeAdd">
  		INSERT INTO PRODUCTGRADE (GRADENUM, PRODUCTNUM, GRADESTOCK, GRADENAME, PRICE)
  		VALUES (PRODUCTSEQ.NEXTVAL, #{productNum}, #{gradeStock}, #{gradeName}, #{price})
  	</insert>
  	
  	<!-- ProductFile 추가 -->
  	<insert id="setProductFileAdd" parameterType="ProductFileDTO">
  		INSERT INTO PRODUCTFILES (FILENUM, PRODUCTNUM, FILENAME, ORINAME)
  		VALUES (PRODUCTSEQ.NEXTVAL, #{productNum}, #{fileName}, #{oriName})
  	</insert>
  	
  	<!-- Update 물품 수정 -->
  	<update id="setProductUpdate" parameterType="ProductDTO">
  		UPDATE PRODUCT SET NAME=#{name}, CONTENTS=#{contents}
  		WHERE PRODUCTNUM=#{productNum}
  	</update>
  	
  	<!-- Delete 물품 삭제 -->
  	<delete id="setProductDelete" parameterType="ProductDTO">
  		DELETE PRODUCT WHERE PRODUCTNUM=#{productNum}
  	</delete>
  	
  	<select id="getProductFileList" parameterType="ProductDTO" resultType="productFileDTO">
  		SELECT * FROM PRODUCTFILES
  		WHERE PRODUCTNUM=#{productNum}
  	</select>
  	
  	<!-- ProducrFile 삭제 -->
  	<delete id="setProductFileDelete" parameterType="productFileDTO">
  		DELETE PRODUCTfILES
  		WHERE FILENUM=#{fileNum}
  	</delete>
  
  
  </mapper>